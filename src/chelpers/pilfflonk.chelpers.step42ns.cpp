#include <alt_bn128.hpp>
#include "pilfflonk_steps.hpp"

void PilFflonkSteps::step42ns_first(AltBn128::Engine &E, StepsParams &params, uint64_t i) {
     AltBn128::FrElement tmp_0 = E.fr.sub(params.cm3_2ns[0 + i*3], params.constValues[0]);
     AltBn128::FrElement tmp_48 = E.fr.mul(params.const_2ns[0 + i * 4], tmp_0);
     AltBn128::FrElement tmp_1 = E.fr.mul(params.cm2_2ns[1 + i*2], params.challenges[2]);
     AltBn128::FrElement tmp_2 = E.fr.add(params.cm2_2ns[0 + i*2], tmp_1);
     AltBn128::FrElement tmp_3 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_4 = E.fr.mul(params.challenges[3], tmp_3);
     AltBn128::FrElement tmp_5 = E.fr.add(tmp_2, tmp_4);
     AltBn128::FrElement tmp_6 = E.fr.mul(params.cm2_2ns[0 + ((i + 8)%2048)*2], params.challenges[2]);
     AltBn128::FrElement tmp_7 = E.fr.add(params.cm2_2ns[1 + i*2], tmp_6);
     AltBn128::FrElement tmp_8 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_9 = E.fr.mul(params.challenges[3], tmp_8);
     AltBn128::FrElement tmp_10 = E.fr.add(tmp_7, tmp_9);
     AltBn128::FrElement tmp_49 = E.fr.mul(tmp_5, tmp_10);
     AltBn128::FrElement tmp_11 = E.fr.mul(params.cm3_2ns[0 + ((i + 8)%2048)*3], tmp_49);
     AltBn128::FrElement tmp_12 = E.fr.mul(params.cm3_2ns[0 + i*3], params.cm3_2ns[2 + i*3]);
     AltBn128::FrElement tmp_50 = E.fr.sub(tmp_11, tmp_12);
     AltBn128::FrElement tmp_51 = params.cm1_2ns[1 + i*4];
     AltBn128::FrElement tmp_52 = params.cm1_2ns[2 + ((i + 8)%2048)*4];
     AltBn128::FrElement tmp_53 = E.fr.mul(params.cm1_2ns[1 + i*4], params.cm1_2ns[2 + ((i + 8)%2048)*4]);
     AltBn128::FrElement tmp_54 = params.const_2ns[2 + i * 4];
     AltBn128::FrElement tmp_55 = params.const_2ns[3 + i * 4];
     AltBn128::FrElement tmp_56 = params.cm1_2ns[3 + i*4];
     AltBn128::FrElement tmp_57 = params.const_2ns[1 + i * 4];
     AltBn128::FrElement tmp_13 = E.fr.mul(params.challenges[0], tmp_54);
     AltBn128::FrElement tmp_14 = E.fr.add(tmp_13, tmp_55);
     AltBn128::FrElement tmp_15 = E.fr.mul(params.challenges[0], tmp_14);
     AltBn128::FrElement tmp_16 = E.fr.add(tmp_15, tmp_56);
     AltBn128::FrElement tmp_17 = E.fr.sub(tmp_16, params.challenges[1]);
     AltBn128::FrElement tmp_18 = E.fr.mul(tmp_17, tmp_57);
     AltBn128::FrElement tmp_58 = E.fr.add(tmp_18, params.challenges[1]);
     AltBn128::FrElement tmp_59 = params.cm1_2ns[0 + i*4];
     AltBn128::FrElement tmp_60 = params.const_2ns[2 + ((i + 8)%2048) * 4];
     AltBn128::FrElement tmp_61 = params.const_2ns[3 + ((i + 8)%2048) * 4];
     AltBn128::FrElement tmp_62 = params.cm1_2ns[3 + ((i + 8)%2048)*4];
     AltBn128::FrElement tmp_63 = params.const_2ns[1 + ((i + 8)%2048) * 4];
     AltBn128::FrElement tmp_19 = E.fr.mul(params.challenges[0], tmp_60);
     AltBn128::FrElement tmp_20 = E.fr.add(tmp_19, tmp_61);
     AltBn128::FrElement tmp_21 = E.fr.mul(params.challenges[0], tmp_20);
     AltBn128::FrElement tmp_22 = E.fr.add(tmp_21, tmp_62);
     AltBn128::FrElement tmp_23 = E.fr.sub(tmp_22, params.challenges[1]);
     AltBn128::FrElement tmp_24 = E.fr.mul(tmp_23, tmp_63);
     AltBn128::FrElement tmp_64 = E.fr.add(tmp_24, params.challenges[1]);
     AltBn128::FrElement tmp_25 = E.fr.mul(params.challenges[4], tmp_48);
     AltBn128::FrElement tmp_26 = E.fr.add(tmp_25, tmp_50);
     AltBn128::FrElement tmp_27 = E.fr.mul(params.challenges[4], tmp_26);
     AltBn128::FrElement tmp_28 = E.fr.mul(tmp_51, params.challenges[0]);
     AltBn128::FrElement tmp_29 = E.fr.add(tmp_28, tmp_52);
     AltBn128::FrElement tmp_30 = E.fr.mul(tmp_29, params.challenges[0]);
     AltBn128::FrElement tmp_31 = E.fr.add(tmp_30, tmp_53);
     AltBn128::FrElement tmp_32 = E.fr.sub(tmp_31, tmp_58);
     AltBn128::FrElement tmp_33 = E.fr.mul(tmp_32, tmp_59);
     AltBn128::FrElement tmp_34 = E.fr.add(tmp_33, tmp_58);
     AltBn128::FrElement tmp_35 = E.fr.sub(tmp_34, params.cm3_2ns[1 + i*3]);
     AltBn128::FrElement tmp_36 = E.fr.add(tmp_27, tmp_35);
     AltBn128::FrElement tmp_37 = E.fr.mul(params.challenges[4], tmp_36);
     AltBn128::FrElement tmp_38 = E.fr.add(params.cm3_2ns[1 + i*3], params.challenges[3]);
     AltBn128::FrElement tmp_39 = E.fr.mul(tmp_64, params.challenges[2]);
     AltBn128::FrElement tmp_40 = E.fr.add(tmp_58, tmp_39);
     AltBn128::FrElement tmp_41 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_42 = E.fr.mul(params.challenges[3], tmp_41);
     AltBn128::FrElement tmp_43 = E.fr.add(tmp_40, tmp_42);
     AltBn128::FrElement tmp_44 = E.fr.mul(tmp_38, tmp_43);
     AltBn128::FrElement tmp_45 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_46 = E.fr.mul(tmp_44, tmp_45);
     AltBn128::FrElement tmp_47 = E.fr.sub(tmp_46, params.cm3_2ns[2 + i*3]);
     AltBn128::FrElement tmp_65 = E.fr.add(tmp_37, tmp_47);
     params.q_2ns[i] = tmp_65;
}

void PilFflonkSteps::step42ns_i(AltBn128::Engine &E, StepsParams &params, uint64_t i) {
     AltBn128::FrElement tmp_0 = E.fr.sub(params.cm3_2ns[0 + i*3], params.constValues[0]);
     AltBn128::FrElement tmp_48 = E.fr.mul(params.const_2ns[0 + i * 4], tmp_0);
     AltBn128::FrElement tmp_1 = E.fr.mul(params.cm2_2ns[1 + i*2], params.challenges[2]);
     AltBn128::FrElement tmp_2 = E.fr.add(params.cm2_2ns[0 + i*2], tmp_1);
     AltBn128::FrElement tmp_3 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_4 = E.fr.mul(params.challenges[3], tmp_3);
     AltBn128::FrElement tmp_5 = E.fr.add(tmp_2, tmp_4);
     AltBn128::FrElement tmp_6 = E.fr.mul(params.cm2_2ns[0 + ((i + 8)%2048)*2], params.challenges[2]);
     AltBn128::FrElement tmp_7 = E.fr.add(params.cm2_2ns[1 + i*2], tmp_6);
     AltBn128::FrElement tmp_8 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_9 = E.fr.mul(params.challenges[3], tmp_8);
     AltBn128::FrElement tmp_10 = E.fr.add(tmp_7, tmp_9);
     AltBn128::FrElement tmp_49 = E.fr.mul(tmp_5, tmp_10);
     AltBn128::FrElement tmp_11 = E.fr.mul(params.cm3_2ns[0 + ((i + 8)%2048)*3], tmp_49);
     AltBn128::FrElement tmp_12 = E.fr.mul(params.cm3_2ns[0 + i*3], params.cm3_2ns[2 + i*3]);
     AltBn128::FrElement tmp_50 = E.fr.sub(tmp_11, tmp_12);
     AltBn128::FrElement tmp_51 = params.cm1_2ns[1 + i*4];
     AltBn128::FrElement tmp_52 = params.cm1_2ns[2 + ((i + 8)%2048)*4];
     AltBn128::FrElement tmp_53 = E.fr.mul(params.cm1_2ns[1 + i*4], params.cm1_2ns[2 + ((i + 8)%2048)*4]);
     AltBn128::FrElement tmp_54 = params.const_2ns[2 + i * 4];
     AltBn128::FrElement tmp_55 = params.const_2ns[3 + i * 4];
     AltBn128::FrElement tmp_56 = params.cm1_2ns[3 + i*4];
     AltBn128::FrElement tmp_57 = params.const_2ns[1 + i * 4];
     AltBn128::FrElement tmp_13 = E.fr.mul(params.challenges[0], tmp_54);
     AltBn128::FrElement tmp_14 = E.fr.add(tmp_13, tmp_55);
     AltBn128::FrElement tmp_15 = E.fr.mul(params.challenges[0], tmp_14);
     AltBn128::FrElement tmp_16 = E.fr.add(tmp_15, tmp_56);
     AltBn128::FrElement tmp_17 = E.fr.sub(tmp_16, params.challenges[1]);
     AltBn128::FrElement tmp_18 = E.fr.mul(tmp_17, tmp_57);
     AltBn128::FrElement tmp_58 = E.fr.add(tmp_18, params.challenges[1]);
     AltBn128::FrElement tmp_59 = params.cm1_2ns[0 + i*4];
     AltBn128::FrElement tmp_60 = params.const_2ns[2 + ((i + 8)%2048) * 4];
     AltBn128::FrElement tmp_61 = params.const_2ns[3 + ((i + 8)%2048) * 4];
     AltBn128::FrElement tmp_62 = params.cm1_2ns[3 + ((i + 8)%2048)*4];
     AltBn128::FrElement tmp_63 = params.const_2ns[1 + ((i + 8)%2048) * 4];
     AltBn128::FrElement tmp_19 = E.fr.mul(params.challenges[0], tmp_60);
     AltBn128::FrElement tmp_20 = E.fr.add(tmp_19, tmp_61);
     AltBn128::FrElement tmp_21 = E.fr.mul(params.challenges[0], tmp_20);
     AltBn128::FrElement tmp_22 = E.fr.add(tmp_21, tmp_62);
     AltBn128::FrElement tmp_23 = E.fr.sub(tmp_22, params.challenges[1]);
     AltBn128::FrElement tmp_24 = E.fr.mul(tmp_23, tmp_63);
     AltBn128::FrElement tmp_64 = E.fr.add(tmp_24, params.challenges[1]);
     AltBn128::FrElement tmp_25 = E.fr.mul(params.challenges[4], tmp_48);
     AltBn128::FrElement tmp_26 = E.fr.add(tmp_25, tmp_50);
     AltBn128::FrElement tmp_27 = E.fr.mul(params.challenges[4], tmp_26);
     AltBn128::FrElement tmp_28 = E.fr.mul(tmp_51, params.challenges[0]);
     AltBn128::FrElement tmp_29 = E.fr.add(tmp_28, tmp_52);
     AltBn128::FrElement tmp_30 = E.fr.mul(tmp_29, params.challenges[0]);
     AltBn128::FrElement tmp_31 = E.fr.add(tmp_30, tmp_53);
     AltBn128::FrElement tmp_32 = E.fr.sub(tmp_31, tmp_58);
     AltBn128::FrElement tmp_33 = E.fr.mul(tmp_32, tmp_59);
     AltBn128::FrElement tmp_34 = E.fr.add(tmp_33, tmp_58);
     AltBn128::FrElement tmp_35 = E.fr.sub(tmp_34, params.cm3_2ns[1 + i*3]);
     AltBn128::FrElement tmp_36 = E.fr.add(tmp_27, tmp_35);
     AltBn128::FrElement tmp_37 = E.fr.mul(params.challenges[4], tmp_36);
     AltBn128::FrElement tmp_38 = E.fr.add(params.cm3_2ns[1 + i*3], params.challenges[3]);
     AltBn128::FrElement tmp_39 = E.fr.mul(tmp_64, params.challenges[2]);
     AltBn128::FrElement tmp_40 = E.fr.add(tmp_58, tmp_39);
     AltBn128::FrElement tmp_41 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_42 = E.fr.mul(params.challenges[3], tmp_41);
     AltBn128::FrElement tmp_43 = E.fr.add(tmp_40, tmp_42);
     AltBn128::FrElement tmp_44 = E.fr.mul(tmp_38, tmp_43);
     AltBn128::FrElement tmp_45 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_46 = E.fr.mul(tmp_44, tmp_45);
     AltBn128::FrElement tmp_47 = E.fr.sub(tmp_46, params.cm3_2ns[2 + i*3]);
     AltBn128::FrElement tmp_65 = E.fr.add(tmp_37, tmp_47);
     params.q_2ns[i] = tmp_65;
}

void PilFflonkSteps::step42ns_last(AltBn128::Engine &E, StepsParams &params, uint64_t i) {
     AltBn128::FrElement tmp_0 = E.fr.sub(params.cm3_2ns[0 + i*3], params.constValues[0]);
     AltBn128::FrElement tmp_48 = E.fr.mul(params.const_2ns[0 + i * 4], tmp_0);
     AltBn128::FrElement tmp_1 = E.fr.mul(params.cm2_2ns[1 + i*2], params.challenges[2]);
     AltBn128::FrElement tmp_2 = E.fr.add(params.cm2_2ns[0 + i*2], tmp_1);
     AltBn128::FrElement tmp_3 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_4 = E.fr.mul(params.challenges[3], tmp_3);
     AltBn128::FrElement tmp_5 = E.fr.add(tmp_2, tmp_4);
     AltBn128::FrElement tmp_6 = E.fr.mul(params.cm2_2ns[0 + ((i + 8)%2048)*2], params.challenges[2]);
     AltBn128::FrElement tmp_7 = E.fr.add(params.cm2_2ns[1 + i*2], tmp_6);
     AltBn128::FrElement tmp_8 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_9 = E.fr.mul(params.challenges[3], tmp_8);
     AltBn128::FrElement tmp_10 = E.fr.add(tmp_7, tmp_9);
     AltBn128::FrElement tmp_49 = E.fr.mul(tmp_5, tmp_10);
     AltBn128::FrElement tmp_11 = E.fr.mul(params.cm3_2ns[0 + ((i + 8)%2048)*3], tmp_49);
     AltBn128::FrElement tmp_12 = E.fr.mul(params.cm3_2ns[0 + i*3], params.cm3_2ns[2 + i*3]);
     AltBn128::FrElement tmp_50 = E.fr.sub(tmp_11, tmp_12);
     AltBn128::FrElement tmp_51 = params.cm1_2ns[1 + i*4];
     AltBn128::FrElement tmp_52 = params.cm1_2ns[2 + ((i + 8)%2048)*4];
     AltBn128::FrElement tmp_53 = E.fr.mul(params.cm1_2ns[1 + i*4], params.cm1_2ns[2 + ((i + 8)%2048)*4]);
     AltBn128::FrElement tmp_54 = params.const_2ns[2 + i * 4];
     AltBn128::FrElement tmp_55 = params.const_2ns[3 + i * 4];
     AltBn128::FrElement tmp_56 = params.cm1_2ns[3 + i*4];
     AltBn128::FrElement tmp_57 = params.const_2ns[1 + i * 4];
     AltBn128::FrElement tmp_13 = E.fr.mul(params.challenges[0], tmp_54);
     AltBn128::FrElement tmp_14 = E.fr.add(tmp_13, tmp_55);
     AltBn128::FrElement tmp_15 = E.fr.mul(params.challenges[0], tmp_14);
     AltBn128::FrElement tmp_16 = E.fr.add(tmp_15, tmp_56);
     AltBn128::FrElement tmp_17 = E.fr.sub(tmp_16, params.challenges[1]);
     AltBn128::FrElement tmp_18 = E.fr.mul(tmp_17, tmp_57);
     AltBn128::FrElement tmp_58 = E.fr.add(tmp_18, params.challenges[1]);
     AltBn128::FrElement tmp_59 = params.cm1_2ns[0 + i*4];
     AltBn128::FrElement tmp_60 = params.const_2ns[2 + ((i + 8)%2048) * 4];
     AltBn128::FrElement tmp_61 = params.const_2ns[3 + ((i + 8)%2048) * 4];
     AltBn128::FrElement tmp_62 = params.cm1_2ns[3 + ((i + 8)%2048)*4];
     AltBn128::FrElement tmp_63 = params.const_2ns[1 + ((i + 8)%2048) * 4];
     AltBn128::FrElement tmp_19 = E.fr.mul(params.challenges[0], tmp_60);
     AltBn128::FrElement tmp_20 = E.fr.add(tmp_19, tmp_61);
     AltBn128::FrElement tmp_21 = E.fr.mul(params.challenges[0], tmp_20);
     AltBn128::FrElement tmp_22 = E.fr.add(tmp_21, tmp_62);
     AltBn128::FrElement tmp_23 = E.fr.sub(tmp_22, params.challenges[1]);
     AltBn128::FrElement tmp_24 = E.fr.mul(tmp_23, tmp_63);
     AltBn128::FrElement tmp_64 = E.fr.add(tmp_24, params.challenges[1]);
     AltBn128::FrElement tmp_25 = E.fr.mul(params.challenges[4], tmp_48);
     AltBn128::FrElement tmp_26 = E.fr.add(tmp_25, tmp_50);
     AltBn128::FrElement tmp_27 = E.fr.mul(params.challenges[4], tmp_26);
     AltBn128::FrElement tmp_28 = E.fr.mul(tmp_51, params.challenges[0]);
     AltBn128::FrElement tmp_29 = E.fr.add(tmp_28, tmp_52);
     AltBn128::FrElement tmp_30 = E.fr.mul(tmp_29, params.challenges[0]);
     AltBn128::FrElement tmp_31 = E.fr.add(tmp_30, tmp_53);
     AltBn128::FrElement tmp_32 = E.fr.sub(tmp_31, tmp_58);
     AltBn128::FrElement tmp_33 = E.fr.mul(tmp_32, tmp_59);
     AltBn128::FrElement tmp_34 = E.fr.add(tmp_33, tmp_58);
     AltBn128::FrElement tmp_35 = E.fr.sub(tmp_34, params.cm3_2ns[1 + i*3]);
     AltBn128::FrElement tmp_36 = E.fr.add(tmp_27, tmp_35);
     AltBn128::FrElement tmp_37 = E.fr.mul(params.challenges[4], tmp_36);
     AltBn128::FrElement tmp_38 = E.fr.add(params.cm3_2ns[1 + i*3], params.challenges[3]);
     AltBn128::FrElement tmp_39 = E.fr.mul(tmp_64, params.challenges[2]);
     AltBn128::FrElement tmp_40 = E.fr.add(tmp_58, tmp_39);
     AltBn128::FrElement tmp_41 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_42 = E.fr.mul(params.challenges[3], tmp_41);
     AltBn128::FrElement tmp_43 = E.fr.add(tmp_40, tmp_42);
     AltBn128::FrElement tmp_44 = E.fr.mul(tmp_38, tmp_43);
     AltBn128::FrElement tmp_45 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_46 = E.fr.mul(tmp_44, tmp_45);
     AltBn128::FrElement tmp_47 = E.fr.sub(tmp_46, params.cm3_2ns[2 + i*3]);
     AltBn128::FrElement tmp_65 = E.fr.add(tmp_37, tmp_47);
     params.q_2ns[i] = tmp_65;
}
