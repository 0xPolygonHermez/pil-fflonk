#include <alt_bn128.hpp>
#include "pilfflonk_steps.hpp"

void PilFflonkSteps::step42ns_first(AltBn128::Engine &E, StepsParams &params, uint64_t i) {
     AltBn128::FrElement tmp_0 = E.fr.sub(params.cm3_2ns[0 + i*3], E.fr.set(1));
     AltBn128::FrElement tmp_30 = E.fr.mul(params.const_2ns[0 + i * 4], tmp_0);
     AltBn128::FrElement tmp_1 = E.fr.mul(params.cm3_2ns[0 + ((i + 8)%8192)*3], params.cm3_2ns[2 + i*3]);
     AltBn128::FrElement tmp_2 = E.fr.mul(params.cm3_2ns[0 + i*3], params.cm3_2ns[1 + i*3]);
     AltBn128::FrElement tmp_31 = E.fr.sub(tmp_1, tmp_2);
     AltBn128::FrElement tmp_32 = params.cm1_2ns[0 + i*3];
     AltBn128::FrElement tmp_3 = E.fr.mul(params.challenges[2], params.x_2ns[i]);
     AltBn128::FrElement tmp_4 = E.fr.add(tmp_32, tmp_3);
     AltBn128::FrElement tmp_33 = E.fr.add(tmp_4, params.challenges[3]);
     AltBn128::FrElement tmp_34 = params.cm1_2ns[1 + i*3];
     AltBn128::FrElement v0;
     E.fr.fromString(v0, "5266228460530200451425464971825753823072228272503274930591399474110020095489");
     AltBn128::FrElement tmp_5 = E.fr.mul(params.challenges[2], v0);
     AltBn128::FrElement tmp_6 = E.fr.mul(tmp_5, params.x_2ns[i]);
     AltBn128::FrElement tmp_7 = E.fr.add(tmp_34, tmp_6);
     AltBn128::FrElement tmp_8 = E.fr.add(tmp_7, params.challenges[3]);
     AltBn128::FrElement tmp_35 = E.fr.mul(tmp_33, tmp_8);
     AltBn128::FrElement tmp_36 = params.cm1_2ns[2 + i*3];
     AltBn128::FrElement tmp_37 = params.const_2ns[1 + i * 4];
     AltBn128::FrElement tmp_9 = E.fr.mul(params.challenges[2], tmp_37);
     AltBn128::FrElement tmp_10 = E.fr.add(tmp_32, tmp_9);
     AltBn128::FrElement tmp_38 = E.fr.add(tmp_10, params.challenges[3]);
     AltBn128::FrElement tmp_39 = params.const_2ns[2 + i * 4];
     AltBn128::FrElement tmp_11 = E.fr.mul(params.challenges[2], tmp_39);
     AltBn128::FrElement tmp_12 = E.fr.add(tmp_34, tmp_11);
     AltBn128::FrElement tmp_13 = E.fr.add(tmp_12, params.challenges[3]);
     AltBn128::FrElement tmp_40 = E.fr.mul(tmp_38, tmp_13);
     AltBn128::FrElement tmp_41 = params.const_2ns[3 + i * 4];
     AltBn128::FrElement tmp_14 = E.fr.mul(params.challenges[4], tmp_30);
     AltBn128::FrElement tmp_15 = E.fr.add(tmp_14, tmp_31);
     AltBn128::FrElement tmp_16 = E.fr.mul(params.challenges[4], tmp_15);
     AltBn128::FrElement v1;
     E.fr.fromString(v1, "7105417016332174850410570896152637638969286250121046049601916147253836355616");
     AltBn128::FrElement tmp_17 = E.fr.mul(params.challenges[2], v1);
     AltBn128::FrElement tmp_18 = E.fr.mul(tmp_17, params.x_2ns[i]);
     AltBn128::FrElement tmp_19 = E.fr.add(tmp_36, tmp_18);
     AltBn128::FrElement tmp_20 = E.fr.add(tmp_19, params.challenges[3]);
     AltBn128::FrElement tmp_21 = E.fr.mul(tmp_35, tmp_20);
     AltBn128::FrElement tmp_22 = E.fr.sub(tmp_21, params.cm3_2ns[1 + i*3]);
     AltBn128::FrElement tmp_23 = E.fr.add(tmp_16, tmp_22);
     AltBn128::FrElement tmp_24 = E.fr.mul(params.challenges[4], tmp_23);
     AltBn128::FrElement tmp_25 = E.fr.mul(params.challenges[2], tmp_41);
     AltBn128::FrElement tmp_26 = E.fr.add(tmp_36, tmp_25);
     AltBn128::FrElement tmp_27 = E.fr.add(tmp_26, params.challenges[3]);
     AltBn128::FrElement tmp_28 = E.fr.mul(tmp_40, tmp_27);
     AltBn128::FrElement tmp_29 = E.fr.sub(tmp_28, params.cm3_2ns[2 + i*3]);
     AltBn128::FrElement tmp_42 = E.fr.add(tmp_24, tmp_29);
     params.q_2ns[i] = tmp_42;
}

void PilFflonkSteps::step42ns_i(AltBn128::Engine &E, StepsParams &params, uint64_t i) {
     AltBn128::FrElement tmp_0 = E.fr.sub(params.cm3_2ns[0 + i*3], E.fr.set(1));
     AltBn128::FrElement tmp_30 = E.fr.mul(params.const_2ns[0 + i * 4], tmp_0);
     AltBn128::FrElement tmp_1 = E.fr.mul(params.cm3_2ns[0 + ((i + 8)%8192)*3], params.cm3_2ns[2 + i*3]);
     AltBn128::FrElement tmp_2 = E.fr.mul(params.cm3_2ns[0 + i*3], params.cm3_2ns[1 + i*3]);
     AltBn128::FrElement tmp_31 = E.fr.sub(tmp_1, tmp_2);
     AltBn128::FrElement tmp_32 = params.cm1_2ns[0 + i*3];
     AltBn128::FrElement tmp_3 = E.fr.mul(params.challenges[2], params.x_2ns[i]);
     AltBn128::FrElement tmp_4 = E.fr.add(tmp_32, tmp_3);
     AltBn128::FrElement tmp_33 = E.fr.add(tmp_4, params.challenges[3]);
     AltBn128::FrElement tmp_34 = params.cm1_2ns[1 + i*3];
     AltBn128::FrElement v0;
     E.fr.fromString(v0, "5266228460530200451425464971825753823072228272503274930591399474110020095489");
     AltBn128::FrElement tmp_5 = E.fr.mul(params.challenges[2], v0);
     AltBn128::FrElement tmp_6 = E.fr.mul(tmp_5, params.x_2ns[i]);
     AltBn128::FrElement tmp_7 = E.fr.add(tmp_34, tmp_6);
     AltBn128::FrElement tmp_8 = E.fr.add(tmp_7, params.challenges[3]);
     AltBn128::FrElement tmp_35 = E.fr.mul(tmp_33, tmp_8);
     AltBn128::FrElement tmp_36 = params.cm1_2ns[2 + i*3];
     AltBn128::FrElement tmp_37 = params.const_2ns[1 + i * 4];
     AltBn128::FrElement tmp_9 = E.fr.mul(params.challenges[2], tmp_37);
     AltBn128::FrElement tmp_10 = E.fr.add(tmp_32, tmp_9);
     AltBn128::FrElement tmp_38 = E.fr.add(tmp_10, params.challenges[3]);
     AltBn128::FrElement tmp_39 = params.const_2ns[2 + i * 4];
     AltBn128::FrElement tmp_11 = E.fr.mul(params.challenges[2], tmp_39);
     AltBn128::FrElement tmp_12 = E.fr.add(tmp_34, tmp_11);
     AltBn128::FrElement tmp_13 = E.fr.add(tmp_12, params.challenges[3]);
     AltBn128::FrElement tmp_40 = E.fr.mul(tmp_38, tmp_13);
     AltBn128::FrElement tmp_41 = params.const_2ns[3 + i * 4];
     AltBn128::FrElement tmp_14 = E.fr.mul(params.challenges[4], tmp_30);
     AltBn128::FrElement tmp_15 = E.fr.add(tmp_14, tmp_31);
     AltBn128::FrElement tmp_16 = E.fr.mul(params.challenges[4], tmp_15);
     AltBn128::FrElement v1;
     E.fr.fromString(v1, "7105417016332174850410570896152637638969286250121046049601916147253836355616");
     AltBn128::FrElement tmp_17 = E.fr.mul(params.challenges[2], v1);
     AltBn128::FrElement tmp_18 = E.fr.mul(tmp_17, params.x_2ns[i]);
     AltBn128::FrElement tmp_19 = E.fr.add(tmp_36, tmp_18);
     AltBn128::FrElement tmp_20 = E.fr.add(tmp_19, params.challenges[3]);
     AltBn128::FrElement tmp_21 = E.fr.mul(tmp_35, tmp_20);
     AltBn128::FrElement tmp_22 = E.fr.sub(tmp_21, params.cm3_2ns[1 + i*3]);
     AltBn128::FrElement tmp_23 = E.fr.add(tmp_16, tmp_22);
     AltBn128::FrElement tmp_24 = E.fr.mul(params.challenges[4], tmp_23);
     AltBn128::FrElement tmp_25 = E.fr.mul(params.challenges[2], tmp_41);
     AltBn128::FrElement tmp_26 = E.fr.add(tmp_36, tmp_25);
     AltBn128::FrElement tmp_27 = E.fr.add(tmp_26, params.challenges[3]);
     AltBn128::FrElement tmp_28 = E.fr.mul(tmp_40, tmp_27);
     AltBn128::FrElement tmp_29 = E.fr.sub(tmp_28, params.cm3_2ns[2 + i*3]);
     AltBn128::FrElement tmp_42 = E.fr.add(tmp_24, tmp_29);
     params.q_2ns[i] = tmp_42;
}

void PilFflonkSteps::step42ns_last(AltBn128::Engine &E, StepsParams &params, uint64_t i) {
     AltBn128::FrElement tmp_0 = E.fr.sub(params.cm3_2ns[0 + i*3], E.fr.set(1));
     AltBn128::FrElement tmp_30 = E.fr.mul(params.const_2ns[0 + i * 4], tmp_0);
     AltBn128::FrElement tmp_1 = E.fr.mul(params.cm3_2ns[0 + ((i + 8)%8192)*3], params.cm3_2ns[2 + i*3]);
     AltBn128::FrElement tmp_2 = E.fr.mul(params.cm3_2ns[0 + i*3], params.cm3_2ns[1 + i*3]);
     AltBn128::FrElement tmp_31 = E.fr.sub(tmp_1, tmp_2);
     AltBn128::FrElement tmp_32 = params.cm1_2ns[0 + i*3];
     AltBn128::FrElement tmp_3 = E.fr.mul(params.challenges[2], params.x_2ns[i]);
     AltBn128::FrElement tmp_4 = E.fr.add(tmp_32, tmp_3);
     AltBn128::FrElement tmp_33 = E.fr.add(tmp_4, params.challenges[3]);
     AltBn128::FrElement tmp_34 = params.cm1_2ns[1 + i*3];
     AltBn128::FrElement v0;
     E.fr.fromString(v0, "5266228460530200451425464971825753823072228272503274930591399474110020095489");
     AltBn128::FrElement tmp_5 = E.fr.mul(params.challenges[2], v0);
     AltBn128::FrElement tmp_6 = E.fr.mul(tmp_5, params.x_2ns[i]);
     AltBn128::FrElement tmp_7 = E.fr.add(tmp_34, tmp_6);
     AltBn128::FrElement tmp_8 = E.fr.add(tmp_7, params.challenges[3]);
     AltBn128::FrElement tmp_35 = E.fr.mul(tmp_33, tmp_8);
     AltBn128::FrElement tmp_36 = params.cm1_2ns[2 + i*3];
     AltBn128::FrElement tmp_37 = params.const_2ns[1 + i * 4];
     AltBn128::FrElement tmp_9 = E.fr.mul(params.challenges[2], tmp_37);
     AltBn128::FrElement tmp_10 = E.fr.add(tmp_32, tmp_9);
     AltBn128::FrElement tmp_38 = E.fr.add(tmp_10, params.challenges[3]);
     AltBn128::FrElement tmp_39 = params.const_2ns[2 + i * 4];
     AltBn128::FrElement tmp_11 = E.fr.mul(params.challenges[2], tmp_39);
     AltBn128::FrElement tmp_12 = E.fr.add(tmp_34, tmp_11);
     AltBn128::FrElement tmp_13 = E.fr.add(tmp_12, params.challenges[3]);
     AltBn128::FrElement tmp_40 = E.fr.mul(tmp_38, tmp_13);
     AltBn128::FrElement tmp_41 = params.const_2ns[3 + i * 4];
     AltBn128::FrElement tmp_14 = E.fr.mul(params.challenges[4], tmp_30);
     AltBn128::FrElement tmp_15 = E.fr.add(tmp_14, tmp_31);
     AltBn128::FrElement tmp_16 = E.fr.mul(params.challenges[4], tmp_15);
     AltBn128::FrElement v1;
     E.fr.fromString(v1, "7105417016332174850410570896152637638969286250121046049601916147253836355616");
     AltBn128::FrElement tmp_17 = E.fr.mul(params.challenges[2], v1);
     AltBn128::FrElement tmp_18 = E.fr.mul(tmp_17, params.x_2ns[i]);
     AltBn128::FrElement tmp_19 = E.fr.add(tmp_36, tmp_18);
     AltBn128::FrElement tmp_20 = E.fr.add(tmp_19, params.challenges[3]);
     AltBn128::FrElement tmp_21 = E.fr.mul(tmp_35, tmp_20);
     AltBn128::FrElement tmp_22 = E.fr.sub(tmp_21, params.cm3_2ns[1 + i*3]);
     AltBn128::FrElement tmp_23 = E.fr.add(tmp_16, tmp_22);
     AltBn128::FrElement tmp_24 = E.fr.mul(params.challenges[4], tmp_23);
     AltBn128::FrElement tmp_25 = E.fr.mul(params.challenges[2], tmp_41);
     AltBn128::FrElement tmp_26 = E.fr.add(tmp_36, tmp_25);
     AltBn128::FrElement tmp_27 = E.fr.add(tmp_26, params.challenges[3]);
     AltBn128::FrElement tmp_28 = E.fr.mul(tmp_40, tmp_27);
     AltBn128::FrElement tmp_29 = E.fr.sub(tmp_28, params.cm3_2ns[2 + i*3]);
     AltBn128::FrElement tmp_42 = E.fr.add(tmp_24, tmp_29);
     params.q_2ns[i] = tmp_42;
}

