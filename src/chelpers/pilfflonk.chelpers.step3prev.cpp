#include <alt_bn128.hpp>
#include "pilfflonk_steps.hpp"

void PilFflonkSteps::step3prev_first(AltBn128::Engine &E, StepsParams &params, uint64_t i) {
     AltBn128::FrElement tmp_36 = params.cm1_n[0 + i*2];
     params.tmpExp_n[0 + i*6] = tmp_36;
     AltBn128::FrElement tmp_37 = params.const_n[1 + i * 4];
     params.tmpExp_n[1 + i*6] = tmp_37;
     AltBn128::FrElement tmp_38 = params.const_n[1 + ((i + 1)%8) * 4];
     params.tmpExp_n[1 + ((i + 1)%8)*6] = tmp_38;
     AltBn128::FrElement tmp_0 = E.fr.add(params.tmpExp_n[0 + i*6], params.challenges[3]);
     AltBn128::FrElement tmp_1 = E.fr.mul(params.tmpExp_n[1 + ((i + 1)%8)*6], params.challenges[2]);
     AltBn128::FrElement tmp_2 = E.fr.add(params.tmpExp_n[1 + i*6], tmp_1);
     AltBn128::FrElement tmp_3 = E.fr.add(E.fr.set(1), params.challenges[2]);
     AltBn128::FrElement tmp_4 = E.fr.mul(params.challenges[3], tmp_3);
     AltBn128::FrElement tmp_5 = E.fr.add(tmp_2, tmp_4);
     AltBn128::FrElement tmp_6 = E.fr.mul(tmp_0, tmp_5);
     AltBn128::FrElement tmp_7 = E.fr.add(E.fr.set(1), params.challenges[2]);
     params.cm3_n[2 + i*4] = E.fr.mul(tmp_6, tmp_7);
     AltBn128::FrElement tmp_8 = E.fr.mul(params.cm2_n[1 + i*4], params.challenges[2]);
     AltBn128::FrElement tmp_9 = E.fr.add(params.cm2_n[0 + i*4], tmp_8);
     AltBn128::FrElement tmp_10 = E.fr.add(E.fr.set(1), params.challenges[2]);
     AltBn128::FrElement tmp_11 = E.fr.mul(params.challenges[3], tmp_10);
     AltBn128::FrElement tmp_12 = E.fr.add(tmp_9, tmp_11);
     AltBn128::FrElement tmp_13 = E.fr.mul(params.cm2_n[0 + ((i + 1)%8)*4], params.challenges[2]);
     AltBn128::FrElement tmp_14 = E.fr.add(params.cm2_n[1 + i*4], tmp_13);
     AltBn128::FrElement tmp_15 = E.fr.add(E.fr.set(1), params.challenges[2]);
     AltBn128::FrElement tmp_16 = E.fr.mul(params.challenges[3], tmp_15);
     AltBn128::FrElement tmp_17 = E.fr.add(tmp_14, tmp_16);
     params.tmpExp_n[4 + i*6] = E.fr.mul(tmp_12, tmp_17);
     AltBn128::FrElement tmp_39 = params.cm1_n[1 + i*2];
     params.tmpExp_n[2 + i*6] = tmp_39;
     AltBn128::FrElement tmp_40 = params.const_n[2 + i * 4];
     params.tmpExp_n[3 + i*6] = tmp_40;
     AltBn128::FrElement tmp_41 = params.const_n[2 + ((i + 1)%8) * 4];
     params.tmpExp_n[3 + ((i + 1)%8)*6] = tmp_41;
     AltBn128::FrElement tmp_18 = E.fr.add(params.tmpExp_n[2 + i*6], params.challenges[3]);
     AltBn128::FrElement tmp_19 = E.fr.mul(params.tmpExp_n[3 + ((i + 1)%8)*6], params.challenges[2]);
     AltBn128::FrElement tmp_20 = E.fr.add(params.tmpExp_n[3 + i*6], tmp_19);
     AltBn128::FrElement tmp_21 = E.fr.add(E.fr.set(1), params.challenges[2]);
     AltBn128::FrElement tmp_22 = E.fr.mul(params.challenges[3], tmp_21);
     AltBn128::FrElement tmp_23 = E.fr.add(tmp_20, tmp_22);
     AltBn128::FrElement tmp_24 = E.fr.mul(tmp_18, tmp_23);
     AltBn128::FrElement tmp_25 = E.fr.add(E.fr.set(1), params.challenges[2]);
     params.cm3_n[3 + i*4] = E.fr.mul(tmp_24, tmp_25);
     AltBn128::FrElement tmp_26 = E.fr.mul(params.cm2_n[3 + i*4], params.challenges[2]);
     AltBn128::FrElement tmp_27 = E.fr.add(params.cm2_n[2 + i*4], tmp_26);
     AltBn128::FrElement tmp_28 = E.fr.add(E.fr.set(1), params.challenges[2]);
     AltBn128::FrElement tmp_29 = E.fr.mul(params.challenges[3], tmp_28);
     AltBn128::FrElement tmp_30 = E.fr.add(tmp_27, tmp_29);
     AltBn128::FrElement tmp_31 = E.fr.mul(params.cm2_n[2 + ((i + 1)%8)*4], params.challenges[2]);
     AltBn128::FrElement tmp_32 = E.fr.add(params.cm2_n[3 + i*4], tmp_31);
     AltBn128::FrElement tmp_33 = E.fr.add(E.fr.set(1), params.challenges[2]);
     AltBn128::FrElement tmp_34 = E.fr.mul(params.challenges[3], tmp_33);
     AltBn128::FrElement tmp_35 = E.fr.add(tmp_32, tmp_34);
     params.tmpExp_n[5 + i*6] = E.fr.mul(tmp_30, tmp_35);
}

void PilFflonkSteps::step3prev_i(AltBn128::Engine &E, StepsParams &params, uint64_t i) {
     AltBn128::FrElement tmp_36 = params.cm1_n[0 + i*2];
     params.tmpExp_n[0 + i*6] = tmp_36;
     AltBn128::FrElement tmp_37 = params.const_n[1 + i * 4];
     params.tmpExp_n[1 + i*6] = tmp_37;
     AltBn128::FrElement tmp_38 = params.const_n[1 + ((i + 1)%8) * 4];
     params.tmpExp_n[1 + ((i + 1)%8)*6] = tmp_38;
     AltBn128::FrElement tmp_0 = E.fr.add(params.tmpExp_n[0 + i*6], params.challenges[3]);
     AltBn128::FrElement tmp_1 = E.fr.mul(params.tmpExp_n[1 + ((i + 1)%8)*6], params.challenges[2]);
     AltBn128::FrElement tmp_2 = E.fr.add(params.tmpExp_n[1 + i*6], tmp_1);
     AltBn128::FrElement tmp_3 = E.fr.add(E.fr.set(1), params.challenges[2]);
     AltBn128::FrElement tmp_4 = E.fr.mul(params.challenges[3], tmp_3);
     AltBn128::FrElement tmp_5 = E.fr.add(tmp_2, tmp_4);
     AltBn128::FrElement tmp_6 = E.fr.mul(tmp_0, tmp_5);
     AltBn128::FrElement tmp_7 = E.fr.add(E.fr.set(1), params.challenges[2]);
     params.cm3_n[2 + i*4] = E.fr.mul(tmp_6, tmp_7);
     AltBn128::FrElement tmp_8 = E.fr.mul(params.cm2_n[1 + i*4], params.challenges[2]);
     AltBn128::FrElement tmp_9 = E.fr.add(params.cm2_n[0 + i*4], tmp_8);
     AltBn128::FrElement tmp_10 = E.fr.add(E.fr.set(1), params.challenges[2]);
     AltBn128::FrElement tmp_11 = E.fr.mul(params.challenges[3], tmp_10);
     AltBn128::FrElement tmp_12 = E.fr.add(tmp_9, tmp_11);
     AltBn128::FrElement tmp_13 = E.fr.mul(params.cm2_n[0 + ((i + 1)%8)*4], params.challenges[2]);
     AltBn128::FrElement tmp_14 = E.fr.add(params.cm2_n[1 + i*4], tmp_13);
     AltBn128::FrElement tmp_15 = E.fr.add(E.fr.set(1), params.challenges[2]);
     AltBn128::FrElement tmp_16 = E.fr.mul(params.challenges[3], tmp_15);
     AltBn128::FrElement tmp_17 = E.fr.add(tmp_14, tmp_16);
     params.tmpExp_n[4 + i*6] = E.fr.mul(tmp_12, tmp_17);
     AltBn128::FrElement tmp_39 = params.cm1_n[1 + i*2];
     params.tmpExp_n[2 + i*6] = tmp_39;
     AltBn128::FrElement tmp_40 = params.const_n[2 + i * 4];
     params.tmpExp_n[3 + i*6] = tmp_40;
     AltBn128::FrElement tmp_41 = params.const_n[2 + ((i + 1)%8) * 4];
     params.tmpExp_n[3 + ((i + 1)%8)*6] = tmp_41;
     AltBn128::FrElement tmp_18 = E.fr.add(params.tmpExp_n[2 + i*6], params.challenges[3]);
     AltBn128::FrElement tmp_19 = E.fr.mul(params.tmpExp_n[3 + ((i + 1)%8)*6], params.challenges[2]);
     AltBn128::FrElement tmp_20 = E.fr.add(params.tmpExp_n[3 + i*6], tmp_19);
     AltBn128::FrElement tmp_21 = E.fr.add(E.fr.set(1), params.challenges[2]);
     AltBn128::FrElement tmp_22 = E.fr.mul(params.challenges[3], tmp_21);
     AltBn128::FrElement tmp_23 = E.fr.add(tmp_20, tmp_22);
     AltBn128::FrElement tmp_24 = E.fr.mul(tmp_18, tmp_23);
     AltBn128::FrElement tmp_25 = E.fr.add(E.fr.set(1), params.challenges[2]);
     params.cm3_n[3 + i*4] = E.fr.mul(tmp_24, tmp_25);
     AltBn128::FrElement tmp_26 = E.fr.mul(params.cm2_n[3 + i*4], params.challenges[2]);
     AltBn128::FrElement tmp_27 = E.fr.add(params.cm2_n[2 + i*4], tmp_26);
     AltBn128::FrElement tmp_28 = E.fr.add(E.fr.set(1), params.challenges[2]);
     AltBn128::FrElement tmp_29 = E.fr.mul(params.challenges[3], tmp_28);
     AltBn128::FrElement tmp_30 = E.fr.add(tmp_27, tmp_29);
     AltBn128::FrElement tmp_31 = E.fr.mul(params.cm2_n[2 + ((i + 1)%8)*4], params.challenges[2]);
     AltBn128::FrElement tmp_32 = E.fr.add(params.cm2_n[3 + i*4], tmp_31);
     AltBn128::FrElement tmp_33 = E.fr.add(E.fr.set(1), params.challenges[2]);
     AltBn128::FrElement tmp_34 = E.fr.mul(params.challenges[3], tmp_33);
     AltBn128::FrElement tmp_35 = E.fr.add(tmp_32, tmp_34);
     params.tmpExp_n[5 + i*6] = E.fr.mul(tmp_30, tmp_35);
}

void PilFflonkSteps::step3prev_last(AltBn128::Engine &E, StepsParams &params, uint64_t i) {
     AltBn128::FrElement tmp_36 = params.cm1_n[0 + i*2];
     params.tmpExp_n[0 + i*6] = tmp_36;
     AltBn128::FrElement tmp_37 = params.const_n[1 + i * 4];
     params.tmpExp_n[1 + i*6] = tmp_37;
     AltBn128::FrElement tmp_38 = params.const_n[1 + ((i + 1)%8) * 4];
     params.tmpExp_n[1 + ((i + 1)%8)*6] = tmp_38;
     AltBn128::FrElement tmp_0 = E.fr.add(params.tmpExp_n[0 + i*6], params.challenges[3]);
     AltBn128::FrElement tmp_1 = E.fr.mul(params.tmpExp_n[1 + ((i + 1)%8)*6], params.challenges[2]);
     AltBn128::FrElement tmp_2 = E.fr.add(params.tmpExp_n[1 + i*6], tmp_1);
     AltBn128::FrElement tmp_3 = E.fr.add(E.fr.set(1), params.challenges[2]);
     AltBn128::FrElement tmp_4 = E.fr.mul(params.challenges[3], tmp_3);
     AltBn128::FrElement tmp_5 = E.fr.add(tmp_2, tmp_4);
     AltBn128::FrElement tmp_6 = E.fr.mul(tmp_0, tmp_5);
     AltBn128::FrElement tmp_7 = E.fr.add(E.fr.set(1), params.challenges[2]);
     params.cm3_n[2 + i*4] = E.fr.mul(tmp_6, tmp_7);
     AltBn128::FrElement tmp_8 = E.fr.mul(params.cm2_n[1 + i*4], params.challenges[2]);
     AltBn128::FrElement tmp_9 = E.fr.add(params.cm2_n[0 + i*4], tmp_8);
     AltBn128::FrElement tmp_10 = E.fr.add(E.fr.set(1), params.challenges[2]);
     AltBn128::FrElement tmp_11 = E.fr.mul(params.challenges[3], tmp_10);
     AltBn128::FrElement tmp_12 = E.fr.add(tmp_9, tmp_11);
     AltBn128::FrElement tmp_13 = E.fr.mul(params.cm2_n[0 + ((i + 1)%8)*4], params.challenges[2]);
     AltBn128::FrElement tmp_14 = E.fr.add(params.cm2_n[1 + i*4], tmp_13);
     AltBn128::FrElement tmp_15 = E.fr.add(E.fr.set(1), params.challenges[2]);
     AltBn128::FrElement tmp_16 = E.fr.mul(params.challenges[3], tmp_15);
     AltBn128::FrElement tmp_17 = E.fr.add(tmp_14, tmp_16);
     params.tmpExp_n[4 + i*6] = E.fr.mul(tmp_12, tmp_17);
     AltBn128::FrElement tmp_39 = params.cm1_n[1 + i*2];
     params.tmpExp_n[2 + i*6] = tmp_39;
     AltBn128::FrElement tmp_40 = params.const_n[2 + i * 4];
     params.tmpExp_n[3 + i*6] = tmp_40;
     AltBn128::FrElement tmp_41 = params.const_n[2 + ((i + 1)%8) * 4];
     params.tmpExp_n[3 + ((i + 1)%8)*6] = tmp_41;
     AltBn128::FrElement tmp_18 = E.fr.add(params.tmpExp_n[2 + i*6], params.challenges[3]);
     AltBn128::FrElement tmp_19 = E.fr.mul(params.tmpExp_n[3 + ((i + 1)%8)*6], params.challenges[2]);
     AltBn128::FrElement tmp_20 = E.fr.add(params.tmpExp_n[3 + i*6], tmp_19);
     AltBn128::FrElement tmp_21 = E.fr.add(E.fr.set(1), params.challenges[2]);
     AltBn128::FrElement tmp_22 = E.fr.mul(params.challenges[3], tmp_21);
     AltBn128::FrElement tmp_23 = E.fr.add(tmp_20, tmp_22);
     AltBn128::FrElement tmp_24 = E.fr.mul(tmp_18, tmp_23);
     AltBn128::FrElement tmp_25 = E.fr.add(E.fr.set(1), params.challenges[2]);
     params.cm3_n[3 + i*4] = E.fr.mul(tmp_24, tmp_25);
     AltBn128::FrElement tmp_26 = E.fr.mul(params.cm2_n[3 + i*4], params.challenges[2]);
     AltBn128::FrElement tmp_27 = E.fr.add(params.cm2_n[2 + i*4], tmp_26);
     AltBn128::FrElement tmp_28 = E.fr.add(E.fr.set(1), params.challenges[2]);
     AltBn128::FrElement tmp_29 = E.fr.mul(params.challenges[3], tmp_28);
     AltBn128::FrElement tmp_30 = E.fr.add(tmp_27, tmp_29);
     AltBn128::FrElement tmp_31 = E.fr.mul(params.cm2_n[2 + ((i + 1)%8)*4], params.challenges[2]);
     AltBn128::FrElement tmp_32 = E.fr.add(params.cm2_n[3 + i*4], tmp_31);
     AltBn128::FrElement tmp_33 = E.fr.add(E.fr.set(1), params.challenges[2]);
     AltBn128::FrElement tmp_34 = E.fr.mul(params.challenges[3], tmp_33);
     AltBn128::FrElement tmp_35 = E.fr.add(tmp_32, tmp_34);
     params.tmpExp_n[5 + i*6] = E.fr.mul(tmp_30, tmp_35);
}
