#include <alt_bn128.hpp>
#include "pilfflonk_steps.hpp"

void PilFflonkSteps::step3prev_first(AltBn128::Engine &E, StepsParams &params, uint64_t i) {
     AltBn128::FrElement tmp_26 = params.cm1_n[7 + i*11];
     AltBn128::FrElement tmp_27 = params.cm1_n[7 + i*11];
     AltBn128::FrElement tmp_28 = params.cm1_n[9 + i*11];
     AltBn128::FrElement tmp_0 = E.fr.mul(tmp_26, params.challenges[0]);
     AltBn128::FrElement tmp_1 = E.fr.add(tmp_0, tmp_27);
     AltBn128::FrElement tmp_2 = E.fr.sub(tmp_1, params.challenges[1]);
     AltBn128::FrElement tmp_3 = E.fr.mul(tmp_2, tmp_28);
     AltBn128::FrElement tmp_29 = E.fr.add(tmp_3, params.challenges[1]);
     params.tmpExp_n[0 + i*2] = E.fr.add(tmp_29, params.challenges[2]);
     AltBn128::FrElement tmp_30 = params.cm1_n[8 + i*11];
     AltBn128::FrElement tmp_31 = params.cm1_n[8 + i*11];
     AltBn128::FrElement tmp_32 = params.cm1_n[10 + i*11];
     AltBn128::FrElement tmp_4 = E.fr.mul(params.challenges[0], tmp_30);
     AltBn128::FrElement tmp_5 = E.fr.add(tmp_4, tmp_31);
     AltBn128::FrElement tmp_6 = E.fr.sub(tmp_5, params.challenges[1]);
     AltBn128::FrElement tmp_7 = E.fr.mul(tmp_6, tmp_32);
     AltBn128::FrElement tmp_33 = E.fr.add(tmp_7, params.challenges[1]);
     params.tmpExp_n[1 + i*2] = E.fr.add(tmp_33, params.challenges[2]);
     AltBn128::FrElement tmp_34 = params.cm1_n[2 + i*11];
     AltBn128::FrElement tmp_8 = E.fr.mul(params.challenges[2], params.x_n[i]);
     AltBn128::FrElement tmp_9 = E.fr.add(tmp_34, tmp_8);
     AltBn128::FrElement tmp_35 = E.fr.add(tmp_9, params.challenges[3]);
     AltBn128::FrElement tmp_36 = params.cm1_n[3 + i*11];
     AltBn128::FrElement tmp_10 = E.fr.mul(params.challenges[2], params.constValues[0]);
     AltBn128::FrElement tmp_11 = E.fr.mul(tmp_10, params.x_n[i]);
     AltBn128::FrElement tmp_12 = E.fr.add(tmp_36, tmp_11);
     AltBn128::FrElement tmp_13 = E.fr.add(tmp_12, params.challenges[3]);
     AltBn128::FrElement tmp_37 = E.fr.mul(tmp_35, tmp_13);
     AltBn128::FrElement tmp_38 = params.cm1_n[4 + i*11];
     AltBn128::FrElement tmp_14 = E.fr.mul(params.challenges[2], params.constValues[1]);
     AltBn128::FrElement tmp_15 = E.fr.mul(tmp_14, params.x_n[i]);
     AltBn128::FrElement tmp_16 = E.fr.add(tmp_38, tmp_15);
     AltBn128::FrElement tmp_17 = E.fr.add(tmp_16, params.challenges[3]);
     params.cm3_n[2 + i*4] = E.fr.mul(tmp_37, tmp_17);
     AltBn128::FrElement tmp_39 = params.const_n[3 + i * 6];
     AltBn128::FrElement tmp_18 = E.fr.mul(params.challenges[2], tmp_39);
     AltBn128::FrElement tmp_19 = E.fr.add(tmp_34, tmp_18);
     AltBn128::FrElement tmp_40 = E.fr.add(tmp_19, params.challenges[3]);
     AltBn128::FrElement tmp_41 = params.const_n[4 + i * 6];
     AltBn128::FrElement tmp_20 = E.fr.mul(params.challenges[2], tmp_41);
     AltBn128::FrElement tmp_21 = E.fr.add(tmp_36, tmp_20);
     AltBn128::FrElement tmp_22 = E.fr.add(tmp_21, params.challenges[3]);
     AltBn128::FrElement tmp_42 = E.fr.mul(tmp_40, tmp_22);
     AltBn128::FrElement tmp_43 = params.const_n[5 + i * 6];
     AltBn128::FrElement tmp_23 = E.fr.mul(params.challenges[2], tmp_43);
     AltBn128::FrElement tmp_24 = E.fr.add(tmp_38, tmp_23);
     AltBn128::FrElement tmp_25 = E.fr.add(tmp_24, params.challenges[3]);
     params.cm3_n[3 + i*4] = E.fr.mul(tmp_42, tmp_25);
}

void PilFflonkSteps::step3prev_i(AltBn128::Engine &E, StepsParams &params, uint64_t i) {
     AltBn128::FrElement tmp_26 = params.cm1_n[7 + i*11];
     AltBn128::FrElement tmp_27 = params.cm1_n[7 + i*11];
     AltBn128::FrElement tmp_28 = params.cm1_n[9 + i*11];
     AltBn128::FrElement tmp_0 = E.fr.mul(tmp_26, params.challenges[0]);
     AltBn128::FrElement tmp_1 = E.fr.add(tmp_0, tmp_27);
     AltBn128::FrElement tmp_2 = E.fr.sub(tmp_1, params.challenges[1]);
     AltBn128::FrElement tmp_3 = E.fr.mul(tmp_2, tmp_28);
     AltBn128::FrElement tmp_29 = E.fr.add(tmp_3, params.challenges[1]);
     params.tmpExp_n[0 + i*2] = E.fr.add(tmp_29, params.challenges[2]);
     AltBn128::FrElement tmp_30 = params.cm1_n[8 + i*11];
     AltBn128::FrElement tmp_31 = params.cm1_n[8 + i*11];
     AltBn128::FrElement tmp_32 = params.cm1_n[10 + i*11];
     AltBn128::FrElement tmp_4 = E.fr.mul(params.challenges[0], tmp_30);
     AltBn128::FrElement tmp_5 = E.fr.add(tmp_4, tmp_31);
     AltBn128::FrElement tmp_6 = E.fr.sub(tmp_5, params.challenges[1]);
     AltBn128::FrElement tmp_7 = E.fr.mul(tmp_6, tmp_32);
     AltBn128::FrElement tmp_33 = E.fr.add(tmp_7, params.challenges[1]);
     params.tmpExp_n[1 + i*2] = E.fr.add(tmp_33, params.challenges[2]);
     AltBn128::FrElement tmp_34 = params.cm1_n[2 + i*11];
     AltBn128::FrElement tmp_8 = E.fr.mul(params.challenges[2], params.x_n[i]);
     AltBn128::FrElement tmp_9 = E.fr.add(tmp_34, tmp_8);
     AltBn128::FrElement tmp_35 = E.fr.add(tmp_9, params.challenges[3]);
     AltBn128::FrElement tmp_36 = params.cm1_n[3 + i*11];
     AltBn128::FrElement tmp_10 = E.fr.mul(params.challenges[2], params.constValues[0]);
     AltBn128::FrElement tmp_11 = E.fr.mul(tmp_10, params.x_n[i]);
     AltBn128::FrElement tmp_12 = E.fr.add(tmp_36, tmp_11);
     AltBn128::FrElement tmp_13 = E.fr.add(tmp_12, params.challenges[3]);
     AltBn128::FrElement tmp_37 = E.fr.mul(tmp_35, tmp_13);
     AltBn128::FrElement tmp_38 = params.cm1_n[4 + i*11];
     AltBn128::FrElement tmp_14 = E.fr.mul(params.challenges[2], params.constValues[1]);
     AltBn128::FrElement tmp_15 = E.fr.mul(tmp_14, params.x_n[i]);
     AltBn128::FrElement tmp_16 = E.fr.add(tmp_38, tmp_15);
     AltBn128::FrElement tmp_17 = E.fr.add(tmp_16, params.challenges[3]);
     params.cm3_n[2 + i*4] = E.fr.mul(tmp_37, tmp_17);
     AltBn128::FrElement tmp_39 = params.const_n[3 + i * 6];
     AltBn128::FrElement tmp_18 = E.fr.mul(params.challenges[2], tmp_39);
     AltBn128::FrElement tmp_19 = E.fr.add(tmp_34, tmp_18);
     AltBn128::FrElement tmp_40 = E.fr.add(tmp_19, params.challenges[3]);
     AltBn128::FrElement tmp_41 = params.const_n[4 + i * 6];
     AltBn128::FrElement tmp_20 = E.fr.mul(params.challenges[2], tmp_41);
     AltBn128::FrElement tmp_21 = E.fr.add(tmp_36, tmp_20);
     AltBn128::FrElement tmp_22 = E.fr.add(tmp_21, params.challenges[3]);
     AltBn128::FrElement tmp_42 = E.fr.mul(tmp_40, tmp_22);
     AltBn128::FrElement tmp_43 = params.const_n[5 + i * 6];
     AltBn128::FrElement tmp_23 = E.fr.mul(params.challenges[2], tmp_43);
     AltBn128::FrElement tmp_24 = E.fr.add(tmp_38, tmp_23);
     AltBn128::FrElement tmp_25 = E.fr.add(tmp_24, params.challenges[3]);
     params.cm3_n[3 + i*4] = E.fr.mul(tmp_42, tmp_25);
}

void PilFflonkSteps::step3prev_last(AltBn128::Engine &E, StepsParams &params, uint64_t i) {
     AltBn128::FrElement tmp_26 = params.cm1_n[7 + i*11];
     AltBn128::FrElement tmp_27 = params.cm1_n[7 + i*11];
     AltBn128::FrElement tmp_28 = params.cm1_n[9 + i*11];
     AltBn128::FrElement tmp_0 = E.fr.mul(tmp_26, params.challenges[0]);
     AltBn128::FrElement tmp_1 = E.fr.add(tmp_0, tmp_27);
     AltBn128::FrElement tmp_2 = E.fr.sub(tmp_1, params.challenges[1]);
     AltBn128::FrElement tmp_3 = E.fr.mul(tmp_2, tmp_28);
     AltBn128::FrElement tmp_29 = E.fr.add(tmp_3, params.challenges[1]);
     params.tmpExp_n[0 + i*2] = E.fr.add(tmp_29, params.challenges[2]);
     AltBn128::FrElement tmp_30 = params.cm1_n[8 + i*11];
     AltBn128::FrElement tmp_31 = params.cm1_n[8 + i*11];
     AltBn128::FrElement tmp_32 = params.cm1_n[10 + i*11];
     AltBn128::FrElement tmp_4 = E.fr.mul(params.challenges[0], tmp_30);
     AltBn128::FrElement tmp_5 = E.fr.add(tmp_4, tmp_31);
     AltBn128::FrElement tmp_6 = E.fr.sub(tmp_5, params.challenges[1]);
     AltBn128::FrElement tmp_7 = E.fr.mul(tmp_6, tmp_32);
     AltBn128::FrElement tmp_33 = E.fr.add(tmp_7, params.challenges[1]);
     params.tmpExp_n[1 + i*2] = E.fr.add(tmp_33, params.challenges[2]);
     AltBn128::FrElement tmp_34 = params.cm1_n[2 + i*11];
     AltBn128::FrElement tmp_8 = E.fr.mul(params.challenges[2], params.x_n[i]);
     AltBn128::FrElement tmp_9 = E.fr.add(tmp_34, tmp_8);
     AltBn128::FrElement tmp_35 = E.fr.add(tmp_9, params.challenges[3]);
     AltBn128::FrElement tmp_36 = params.cm1_n[3 + i*11];
     AltBn128::FrElement tmp_10 = E.fr.mul(params.challenges[2], params.constValues[0]);
     AltBn128::FrElement tmp_11 = E.fr.mul(tmp_10, params.x_n[i]);
     AltBn128::FrElement tmp_12 = E.fr.add(tmp_36, tmp_11);
     AltBn128::FrElement tmp_13 = E.fr.add(tmp_12, params.challenges[3]);
     AltBn128::FrElement tmp_37 = E.fr.mul(tmp_35, tmp_13);
     AltBn128::FrElement tmp_38 = params.cm1_n[4 + i*11];
     AltBn128::FrElement tmp_14 = E.fr.mul(params.challenges[2], params.constValues[1]);
     AltBn128::FrElement tmp_15 = E.fr.mul(tmp_14, params.x_n[i]);
     AltBn128::FrElement tmp_16 = E.fr.add(tmp_38, tmp_15);
     AltBn128::FrElement tmp_17 = E.fr.add(tmp_16, params.challenges[3]);
     params.cm3_n[2 + i*4] = E.fr.mul(tmp_37, tmp_17);
     AltBn128::FrElement tmp_39 = params.const_n[3 + i * 6];
     AltBn128::FrElement tmp_18 = E.fr.mul(params.challenges[2], tmp_39);
     AltBn128::FrElement tmp_19 = E.fr.add(tmp_34, tmp_18);
     AltBn128::FrElement tmp_40 = E.fr.add(tmp_19, params.challenges[3]);
     AltBn128::FrElement tmp_41 = params.const_n[4 + i * 6];
     AltBn128::FrElement tmp_20 = E.fr.mul(params.challenges[2], tmp_41);
     AltBn128::FrElement tmp_21 = E.fr.add(tmp_36, tmp_20);
     AltBn128::FrElement tmp_22 = E.fr.add(tmp_21, params.challenges[3]);
     AltBn128::FrElement tmp_42 = E.fr.mul(tmp_40, tmp_22);
     AltBn128::FrElement tmp_43 = params.const_n[5 + i * 6];
     AltBn128::FrElement tmp_23 = E.fr.mul(params.challenges[2], tmp_43);
     AltBn128::FrElement tmp_24 = E.fr.add(tmp_38, tmp_23);
     AltBn128::FrElement tmp_25 = E.fr.add(tmp_24, params.challenges[3]);
     params.cm3_n[3 + i*4] = E.fr.mul(tmp_42, tmp_25);
}
