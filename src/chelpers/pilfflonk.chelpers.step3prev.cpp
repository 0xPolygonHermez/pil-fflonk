#include <alt_bn128.hpp>
#include "pilfflonk_steps.hpp"

void PilFflonkSteps::step3prev_first(AltBn128::Engine &E, StepsParams &params, uint64_t i) {
     AltBn128::FrElement tmp_48 = params.cm1_n[1 + i*4];
     AltBn128::FrElement tmp_49 = params.cm1_n[2 + ((i + 1)%256)*4];
     AltBn128::FrElement tmp_50 = E.fr.mul(params.cm1_n[1 + i*4], params.cm1_n[2 + ((i + 1)%256)*4]);
     AltBn128::FrElement tmp_51 = params.const_n[2 + i * 4];
     AltBn128::FrElement tmp_52 = params.const_n[3 + i * 4];
     AltBn128::FrElement tmp_53 = params.cm1_n[3 + i*4];
     AltBn128::FrElement tmp_54 = params.const_n[1 + i * 4];
     AltBn128::FrElement tmp_12 = E.fr.mul(params.challenges[0], tmp_51);
     AltBn128::FrElement tmp_13 = E.fr.add(tmp_12, tmp_52);
     AltBn128::FrElement tmp_14 = E.fr.mul(params.challenges[0], tmp_13);
     AltBn128::FrElement tmp_15 = E.fr.add(tmp_14, tmp_53);
     AltBn128::FrElement tmp_16 = E.fr.sub(tmp_15, params.challenges[1]);
     AltBn128::FrElement tmp_17 = E.fr.mul(tmp_16, tmp_54);
     params.tmpExp_n[0 + i*2] = E.fr.add(tmp_17, params.challenges[1]);
     AltBn128::FrElement tmp_55 = params.cm1_n[0 + i*4];
     AltBn128::FrElement tmp_18 = E.fr.mul(tmp_48, params.challenges[0]);
     AltBn128::FrElement tmp_19 = E.fr.add(tmp_18, tmp_49);
     AltBn128::FrElement tmp_20 = E.fr.mul(tmp_19, params.challenges[0]);
     AltBn128::FrElement tmp_21 = E.fr.add(tmp_20, tmp_50);
     AltBn128::FrElement tmp_22 = E.fr.sub(tmp_21, params.tmpExp_n[0 + i*2]);
     AltBn128::FrElement tmp_23 = E.fr.mul(tmp_22, tmp_55);
     params.cm3_n[1 + i*3] = E.fr.add(tmp_23, params.tmpExp_n[0 + i*2]);
     AltBn128::FrElement tmp_56 = params.const_n[2 + ((i + 1)%256) * 4];
     AltBn128::FrElement tmp_57 = params.const_n[3 + ((i + 1)%256) * 4];
     AltBn128::FrElement tmp_58 = params.cm1_n[3 + ((i + 1)%256)*4];
     AltBn128::FrElement tmp_59 = params.const_n[1 + ((i + 1)%256) * 4];
     AltBn128::FrElement tmp_24 = E.fr.mul(params.challenges[0], tmp_56);
     AltBn128::FrElement tmp_25 = E.fr.add(tmp_24, tmp_57);
     AltBn128::FrElement tmp_26 = E.fr.mul(params.challenges[0], tmp_25);
     AltBn128::FrElement tmp_27 = E.fr.add(tmp_26, tmp_58);
     AltBn128::FrElement tmp_28 = E.fr.sub(tmp_27, params.challenges[1]);
     AltBn128::FrElement tmp_29 = E.fr.mul(tmp_28, tmp_59);
     params.tmpExp_n[0 + ((i + 1)%256)*2] = E.fr.add(tmp_29, params.challenges[1]);
     AltBn128::FrElement tmp_30 = E.fr.add(params.cm3_n[1 + i*3], params.challenges[3]);
     AltBn128::FrElement tmp_31 = E.fr.mul(params.tmpExp_n[0 + ((i + 1)%256)*2], params.challenges[2]);
     AltBn128::FrElement tmp_32 = E.fr.add(params.tmpExp_n[0 + i*2], tmp_31);
     AltBn128::FrElement tmp_33 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_34 = E.fr.mul(params.challenges[3], tmp_33);
     AltBn128::FrElement tmp_35 = E.fr.add(tmp_32, tmp_34);
     AltBn128::FrElement tmp_36 = E.fr.mul(tmp_30, tmp_35);
     AltBn128::FrElement tmp_37 = E.fr.add(params.constValues[0], params.challenges[2]);
     params.cm3_n[2 + i*3] = E.fr.mul(tmp_36, tmp_37);
     AltBn128::FrElement tmp_38 = E.fr.mul(params.cm2_n[1 + i*2], params.challenges[2]);
     AltBn128::FrElement tmp_39 = E.fr.add(params.cm2_n[0 + i*2], tmp_38);
     AltBn128::FrElement tmp_40 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_41 = E.fr.mul(params.challenges[3], tmp_40);
     AltBn128::FrElement tmp_42 = E.fr.add(tmp_39, tmp_41);
     AltBn128::FrElement tmp_43 = E.fr.mul(params.cm2_n[0 + ((i + 1)%256)*2], params.challenges[2]);
     AltBn128::FrElement tmp_44 = E.fr.add(params.cm2_n[1 + i*2], tmp_43);
     AltBn128::FrElement tmp_45 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_46 = E.fr.mul(params.challenges[3], tmp_45);
     AltBn128::FrElement tmp_47 = E.fr.add(tmp_44, tmp_46);
     params.tmpExp_n[1 + i*2] = E.fr.mul(tmp_42, tmp_47);
}

void PilFflonkSteps::step3prev_i(AltBn128::Engine &E, StepsParams &params, uint64_t i) {
     AltBn128::FrElement tmp_48 = params.cm1_n[1 + i*4];
     AltBn128::FrElement tmp_49 = params.cm1_n[2 + ((i + 1)%256)*4];
     AltBn128::FrElement tmp_50 = E.fr.mul(params.cm1_n[1 + i*4], params.cm1_n[2 + ((i + 1)%256)*4]);
     AltBn128::FrElement tmp_51 = params.const_n[2 + i * 4];
     AltBn128::FrElement tmp_52 = params.const_n[3 + i * 4];
     AltBn128::FrElement tmp_53 = params.cm1_n[3 + i*4];
     AltBn128::FrElement tmp_54 = params.const_n[1 + i * 4];
     AltBn128::FrElement tmp_12 = E.fr.mul(params.challenges[0], tmp_51);
     AltBn128::FrElement tmp_13 = E.fr.add(tmp_12, tmp_52);
     AltBn128::FrElement tmp_14 = E.fr.mul(params.challenges[0], tmp_13);
     AltBn128::FrElement tmp_15 = E.fr.add(tmp_14, tmp_53);
     AltBn128::FrElement tmp_16 = E.fr.sub(tmp_15, params.challenges[1]);
     AltBn128::FrElement tmp_17 = E.fr.mul(tmp_16, tmp_54);
     params.tmpExp_n[0 + i*2] = E.fr.add(tmp_17, params.challenges[1]);
     AltBn128::FrElement tmp_55 = params.cm1_n[0 + i*4];
     AltBn128::FrElement tmp_18 = E.fr.mul(tmp_48, params.challenges[0]);
     AltBn128::FrElement tmp_19 = E.fr.add(tmp_18, tmp_49);
     AltBn128::FrElement tmp_20 = E.fr.mul(tmp_19, params.challenges[0]);
     AltBn128::FrElement tmp_21 = E.fr.add(tmp_20, tmp_50);
     AltBn128::FrElement tmp_22 = E.fr.sub(tmp_21, params.tmpExp_n[0 + i*2]);
     AltBn128::FrElement tmp_23 = E.fr.mul(tmp_22, tmp_55);
     params.cm3_n[1 + i*3] = E.fr.add(tmp_23, params.tmpExp_n[0 + i*2]);
     AltBn128::FrElement tmp_56 = params.const_n[2 + ((i + 1)%256) * 4];
     AltBn128::FrElement tmp_57 = params.const_n[3 + ((i + 1)%256) * 4];
     AltBn128::FrElement tmp_58 = params.cm1_n[3 + ((i + 1)%256)*4];
     AltBn128::FrElement tmp_59 = params.const_n[1 + ((i + 1)%256) * 4];
     AltBn128::FrElement tmp_24 = E.fr.mul(params.challenges[0], tmp_56);
     AltBn128::FrElement tmp_25 = E.fr.add(tmp_24, tmp_57);
     AltBn128::FrElement tmp_26 = E.fr.mul(params.challenges[0], tmp_25);
     AltBn128::FrElement tmp_27 = E.fr.add(tmp_26, tmp_58);
     AltBn128::FrElement tmp_28 = E.fr.sub(tmp_27, params.challenges[1]);
     AltBn128::FrElement tmp_29 = E.fr.mul(tmp_28, tmp_59);
     params.tmpExp_n[0 + ((i + 1)%256)*2] = E.fr.add(tmp_29, params.challenges[1]);
     AltBn128::FrElement tmp_30 = E.fr.add(params.cm3_n[1 + i*3], params.challenges[3]);
     AltBn128::FrElement tmp_31 = E.fr.mul(params.tmpExp_n[0 + ((i + 1)%256)*2], params.challenges[2]);
     AltBn128::FrElement tmp_32 = E.fr.add(params.tmpExp_n[0 + i*2], tmp_31);
     AltBn128::FrElement tmp_33 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_34 = E.fr.mul(params.challenges[3], tmp_33);
     AltBn128::FrElement tmp_35 = E.fr.add(tmp_32, tmp_34);
     AltBn128::FrElement tmp_36 = E.fr.mul(tmp_30, tmp_35);
     AltBn128::FrElement tmp_37 = E.fr.add(params.constValues[0], params.challenges[2]);
     params.cm3_n[2 + i*3] = E.fr.mul(tmp_36, tmp_37);
     AltBn128::FrElement tmp_38 = E.fr.mul(params.cm2_n[1 + i*2], params.challenges[2]);
     AltBn128::FrElement tmp_39 = E.fr.add(params.cm2_n[0 + i*2], tmp_38);
     AltBn128::FrElement tmp_40 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_41 = E.fr.mul(params.challenges[3], tmp_40);
     AltBn128::FrElement tmp_42 = E.fr.add(tmp_39, tmp_41);
     AltBn128::FrElement tmp_43 = E.fr.mul(params.cm2_n[0 + ((i + 1)%256)*2], params.challenges[2]);
     AltBn128::FrElement tmp_44 = E.fr.add(params.cm2_n[1 + i*2], tmp_43);
     AltBn128::FrElement tmp_45 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_46 = E.fr.mul(params.challenges[3], tmp_45);
     AltBn128::FrElement tmp_47 = E.fr.add(tmp_44, tmp_46);
     params.tmpExp_n[1 + i*2] = E.fr.mul(tmp_42, tmp_47);
}

void PilFflonkSteps::step3prev_last(AltBn128::Engine &E, StepsParams &params, uint64_t i) {
     AltBn128::FrElement tmp_48 = params.cm1_n[1 + i*4];
     AltBn128::FrElement tmp_49 = params.cm1_n[2 + ((i + 1)%256)*4];
     AltBn128::FrElement tmp_50 = E.fr.mul(params.cm1_n[1 + i*4], params.cm1_n[2 + ((i + 1)%256)*4]);
     AltBn128::FrElement tmp_51 = params.const_n[2 + i * 4];
     AltBn128::FrElement tmp_52 = params.const_n[3 + i * 4];
     AltBn128::FrElement tmp_53 = params.cm1_n[3 + i*4];
     AltBn128::FrElement tmp_54 = params.const_n[1 + i * 4];
     AltBn128::FrElement tmp_12 = E.fr.mul(params.challenges[0], tmp_51);
     AltBn128::FrElement tmp_13 = E.fr.add(tmp_12, tmp_52);
     AltBn128::FrElement tmp_14 = E.fr.mul(params.challenges[0], tmp_13);
     AltBn128::FrElement tmp_15 = E.fr.add(tmp_14, tmp_53);
     AltBn128::FrElement tmp_16 = E.fr.sub(tmp_15, params.challenges[1]);
     AltBn128::FrElement tmp_17 = E.fr.mul(tmp_16, tmp_54);
     params.tmpExp_n[0 + i*2] = E.fr.add(tmp_17, params.challenges[1]);
     AltBn128::FrElement tmp_55 = params.cm1_n[0 + i*4];
     AltBn128::FrElement tmp_18 = E.fr.mul(tmp_48, params.challenges[0]);
     AltBn128::FrElement tmp_19 = E.fr.add(tmp_18, tmp_49);
     AltBn128::FrElement tmp_20 = E.fr.mul(tmp_19, params.challenges[0]);
     AltBn128::FrElement tmp_21 = E.fr.add(tmp_20, tmp_50);
     AltBn128::FrElement tmp_22 = E.fr.sub(tmp_21, params.tmpExp_n[0 + i*2]);
     AltBn128::FrElement tmp_23 = E.fr.mul(tmp_22, tmp_55);
     params.cm3_n[1 + i*3] = E.fr.add(tmp_23, params.tmpExp_n[0 + i*2]);
     AltBn128::FrElement tmp_56 = params.const_n[2 + ((i + 1)%256) * 4];
     AltBn128::FrElement tmp_57 = params.const_n[3 + ((i + 1)%256) * 4];
     AltBn128::FrElement tmp_58 = params.cm1_n[3 + ((i + 1)%256)*4];
     AltBn128::FrElement tmp_59 = params.const_n[1 + ((i + 1)%256) * 4];
     AltBn128::FrElement tmp_24 = E.fr.mul(params.challenges[0], tmp_56);
     AltBn128::FrElement tmp_25 = E.fr.add(tmp_24, tmp_57);
     AltBn128::FrElement tmp_26 = E.fr.mul(params.challenges[0], tmp_25);
     AltBn128::FrElement tmp_27 = E.fr.add(tmp_26, tmp_58);
     AltBn128::FrElement tmp_28 = E.fr.sub(tmp_27, params.challenges[1]);
     AltBn128::FrElement tmp_29 = E.fr.mul(tmp_28, tmp_59);
     params.tmpExp_n[0 + ((i + 1)%256)*2] = E.fr.add(tmp_29, params.challenges[1]);
     AltBn128::FrElement tmp_30 = E.fr.add(params.cm3_n[1 + i*3], params.challenges[3]);
     AltBn128::FrElement tmp_31 = E.fr.mul(params.tmpExp_n[0 + ((i + 1)%256)*2], params.challenges[2]);
     AltBn128::FrElement tmp_32 = E.fr.add(params.tmpExp_n[0 + i*2], tmp_31);
     AltBn128::FrElement tmp_33 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_34 = E.fr.mul(params.challenges[3], tmp_33);
     AltBn128::FrElement tmp_35 = E.fr.add(tmp_32, tmp_34);
     AltBn128::FrElement tmp_36 = E.fr.mul(tmp_30, tmp_35);
     AltBn128::FrElement tmp_37 = E.fr.add(params.constValues[0], params.challenges[2]);
     params.cm3_n[2 + i*3] = E.fr.mul(tmp_36, tmp_37);
     AltBn128::FrElement tmp_38 = E.fr.mul(params.cm2_n[1 + i*2], params.challenges[2]);
     AltBn128::FrElement tmp_39 = E.fr.add(params.cm2_n[0 + i*2], tmp_38);
     AltBn128::FrElement tmp_40 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_41 = E.fr.mul(params.challenges[3], tmp_40);
     AltBn128::FrElement tmp_42 = E.fr.add(tmp_39, tmp_41);
     AltBn128::FrElement tmp_43 = E.fr.mul(params.cm2_n[0 + ((i + 1)%256)*2], params.challenges[2]);
     AltBn128::FrElement tmp_44 = E.fr.add(params.cm2_n[1 + i*2], tmp_43);
     AltBn128::FrElement tmp_45 = E.fr.add(params.constValues[0], params.challenges[2]);
     AltBn128::FrElement tmp_46 = E.fr.mul(params.challenges[3], tmp_45);
     AltBn128::FrElement tmp_47 = E.fr.add(tmp_44, tmp_46);
     params.tmpExp_n[1 + i*2] = E.fr.mul(tmp_42, tmp_47);
}
